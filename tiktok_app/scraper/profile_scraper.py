# scraper/profile_scraper.py
import pandas as pd
import time
import os
from multiprocessing import Process
from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
from selenium.common.exceptions import NoSuchElementException
from tiktok_captcha_solver import make_undetected_chromedriver_solver
import chromedriver_autoinstaller

def scrape_single_batch(batch_data, batch_num, total_batch, output_dir):
<<<<<<< HEAD
    chromedriver_autoinstaller.install()
    print(f"\nüîµ [Batch {batch_num}] Kh·ªüi ƒë·ªông tr√¨nh duy·ªát...")
=======
    # chromedriver_autoinstaller.install()
    # print(f"\nüîµ [Batch {batch_num}] Kh·ªüi ƒë·ªông tr√¨nh duy·ªát...")
>>>>>>> f1f5772 (add)
    # api_key = "5fe871299e9a4e80267ba952e4b8df24"
    # options = uc.ChromeOptions()
    # service = Service("chromedriver.exe")
    options = Options()
    options.add_argument("--headless")
    options.add_argument("--disable-infobars")
    options.add_argument("--window-size=1920,1080")
    options.add_argument("--log-level=3")
    # driver = make_undetected_chromedriver_solver(api_key, options=options)
    
    driver = webdriver.Chrome(options=options)
    # driver = webdriver.Chrome(service=service, options=options)
    results = []

    for i, (index, row) in enumerate(batch_data.iterrows(), start=1):
        url = row['Profile URL']
        # print(f"[Batch {batch_num}/{total_batch}] ‚û§ ({i}/{len(batch_data)}) {url}")
        try:
            driver.get(url)
            time.sleep(5)
            stats = {
                'Following': driver.find_element(By.CSS_SELECTOR, 'strong[data-e2e="following-count"]').text,
                'Followers': driver.find_element(By.CSS_SELECTOR, 'strong[data-e2e="followers-count"]').text,
                'Likes': driver.find_element(By.CSS_SELECTOR, 'strong[data-e2e="likes-count"]').text,
                'Bio': driver.find_element(By.CSS_SELECTOR, 'h2[data-e2e="user-bio"]').text,
            }
            results.append({**row.to_dict(), **stats})
        except NoSuchElementException:
            print(f"[Batch {batch_num}] ‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y th√¥ng tin.")
        time.sleep(4)

    driver.quit()
    batch_file = os.path.join(output_dir, f"batch_{batch_num}.csv")
    pd.DataFrame(results).to_csv(batch_file, index=False, encoding='utf-8-sig')
    # print(f"‚úÖ [Batch {batch_num}] ƒê√£ l∆∞u v√†o {batch_file}")


def scrape_profiles(input_file, output_file, batch_size=50, delay_between_batches=15):
    df = pd.read_csv(input_file)
    total = len(df)
    batch_count = (total + batch_size - 1) // batch_size
    output_dir = os.path.dirname(output_file)
    os.makedirs(output_dir, exist_ok=True)

    # print(f"üì¶ T·ªïng s·ªë profile: {total}. S·∫Ω chia th√†nh {batch_count} batch (m·ªói batch {batch_size} d√≤ng)...")

    processes = []

    for i in range(batch_count):
        batch_data = df.iloc[i * batch_size : (i + 1) * batch_size]
        batch_num = i + 1
        p = Process(target=scrape_single_batch, args=(batch_data, batch_num, batch_count, output_dir))
        p.start()
        processes.append(p)
        if i < batch_count - 1:
            # print(f"‚è≥ Ch·ªù {delay_between_batches} gi√¢y ƒë·ªÉ m·ªü batch ti·∫øp theo...")
            time.sleep(delay_between_batches)

    # ƒê·ª£i t·∫•t c·∫£ batch ho√†n th√†nh
    for p in processes:
        p.join()

    # G·ªôp t·∫•t c·∫£ c√°c file batch
    # print("üì• ƒêang g·ªôp d·ªØ li·ªáu t·ª´ c√°c batch...")
    all_results = []
    for i in range(1, batch_count + 1):
        batch_file = os.path.join(output_dir, f"batch_{i}.csv")
        if os.path.exists(batch_file):
            df_batch = pd.read_csv(batch_file)
            all_results.append(df_batch)
            os.remove(batch_file)  # Xo√° file batch sau khi g·ªôp

    if all_results:
        final_df = pd.concat(all_results, ignore_index=True)
        final_df.to_csv(output_file, index=False, encoding='utf-8-sig')
        # print(f"‚úÖ ƒê√£ l∆∞u k·∫øt qu·∫£ cu·ªëi c√πng t·∫°i: {output_file}")
    else:
        print("‚ùå Kh√¥ng c√≥ d·ªØ li·ªáu n√†o ƒë∆∞·ª£c thu th·∫≠p.")